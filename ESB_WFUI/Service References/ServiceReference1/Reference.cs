//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ESB_WFUI.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Weather", Namespace="http://www.restfulwebservices.net/DataContracts/2008/01")]
    [System.SerializableAttribute()]
    public partial class Weather : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WindField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VisibilityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SkyConditionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DewPointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RelativeHumidityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PressureField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Time {
            get {
                return this.TimeField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeField, value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Wind {
            get {
                return this.WindField;
            }
            set {
                if ((object.ReferenceEquals(this.WindField, value) != true)) {
                    this.WindField = value;
                    this.RaisePropertyChanged("Wind");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Visibility {
            get {
                return this.VisibilityField;
            }
            set {
                if ((object.ReferenceEquals(this.VisibilityField, value) != true)) {
                    this.VisibilityField = value;
                    this.RaisePropertyChanged("Visibility");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string SkyConditions {
            get {
                return this.SkyConditionsField;
            }
            set {
                if ((object.ReferenceEquals(this.SkyConditionsField, value) != true)) {
                    this.SkyConditionsField = value;
                    this.RaisePropertyChanged("SkyConditions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((object.ReferenceEquals(this.TemperatureField, value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string DewPoint {
            get {
                return this.DewPointField;
            }
            set {
                if ((object.ReferenceEquals(this.DewPointField, value) != true)) {
                    this.DewPointField = value;
                    this.RaisePropertyChanged("DewPoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public string RelativeHumidity {
            get {
                return this.RelativeHumidityField;
            }
            set {
                if ((object.ReferenceEquals(this.RelativeHumidityField, value) != true)) {
                    this.RelativeHumidityField = value;
                    this.RaisePropertyChanged("RelativeHumidity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public string Pressure {
            get {
                return this.PressureField;
            }
            set {
                if ((object.ReferenceEquals(this.PressureField, value) != true)) {
                    this.PressureField = value;
                    this.RaisePropertyChanged("Pressure");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01", ConfigurationName="ServiceReference1.IWeatherForecastService")]
    public interface IWeatherForecastService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01/IWeatherForecastS" +
            "ervice/GetCitiesByCountry", ReplyAction="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01/IWeatherForecastS" +
            "ervice/GetCitiesByCountryResponse")]
        string[] GetCitiesByCountry(string Country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01/IWeatherForecastS" +
            "ervice/GetCitiesByCountry", ReplyAction="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01/IWeatherForecastS" +
            "ervice/GetCitiesByCountryResponse")]
        System.Threading.Tasks.Task<string[]> GetCitiesByCountryAsync(string Country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01/IWeatherForecastS" +
            "ervice/GetForecastByCity", ReplyAction="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01/IWeatherForecastS" +
            "ervice/GetForecastByCityResponse")]
        ESB_WFUI.ServiceReference1.Weather GetForecastByCity(string City, string Country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01/IWeatherForecastS" +
            "ervice/GetForecastByCity", ReplyAction="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01/IWeatherForecastS" +
            "ervice/GetForecastByCityResponse")]
        System.Threading.Tasks.Task<ESB_WFUI.ServiceReference1.Weather> GetForecastByCityAsync(string City, string Country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01/IWeatherForecastS" +
            "ervice/GetCitiesByCountryJson", ReplyAction="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01/IWeatherForecastS" +
            "ervice/GetCitiesByCountryJsonResponse")]
        string[] GetCitiesByCountryJson(string Country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01/IWeatherForecastS" +
            "ervice/GetCitiesByCountryJson", ReplyAction="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01/IWeatherForecastS" +
            "ervice/GetCitiesByCountryJsonResponse")]
        System.Threading.Tasks.Task<string[]> GetCitiesByCountryJsonAsync(string Country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01/IWeatherForecastS" +
            "ervice/GetForecastByCityJson", ReplyAction="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01/IWeatherForecastS" +
            "ervice/GetForecastByCityJsonResponse")]
        ESB_WFUI.ServiceReference1.Weather GetForecastByCityJson(string City, string Country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01/IWeatherForecastS" +
            "ervice/GetForecastByCityJson", ReplyAction="http://www.restfulwebservices.net/ServiceContracts/Rest/2008/01/IWeatherForecastS" +
            "ervice/GetForecastByCityJsonResponse")]
        System.Threading.Tasks.Task<ESB_WFUI.ServiceReference1.Weather> GetForecastByCityJsonAsync(string City, string Country);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWeatherForecastServiceChannel : ESB_WFUI.ServiceReference1.IWeatherForecastService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WeatherForecastServiceClient : System.ServiceModel.ClientBase<ESB_WFUI.ServiceReference1.IWeatherForecastService>, ESB_WFUI.ServiceReference1.IWeatherForecastService {
        
        public WeatherForecastServiceClient() {
        }
        
        public WeatherForecastServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WeatherForecastServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherForecastServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherForecastServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetCitiesByCountry(string Country) {
            return base.Channel.GetCitiesByCountry(Country);
        }
        
        public System.Threading.Tasks.Task<string[]> GetCitiesByCountryAsync(string Country) {
            return base.Channel.GetCitiesByCountryAsync(Country);
        }
        
        public ESB_WFUI.ServiceReference1.Weather GetForecastByCity(string City, string Country) {
            return base.Channel.GetForecastByCity(City, Country);
        }
        
        public System.Threading.Tasks.Task<ESB_WFUI.ServiceReference1.Weather> GetForecastByCityAsync(string City, string Country) {
            return base.Channel.GetForecastByCityAsync(City, Country);
        }
        
        public string[] GetCitiesByCountryJson(string Country) {
            return base.Channel.GetCitiesByCountryJson(Country);
        }
        
        public System.Threading.Tasks.Task<string[]> GetCitiesByCountryJsonAsync(string Country) {
            return base.Channel.GetCitiesByCountryJsonAsync(Country);
        }
        
        public ESB_WFUI.ServiceReference1.Weather GetForecastByCityJson(string City, string Country) {
            return base.Channel.GetForecastByCityJson(City, Country);
        }
        
        public System.Threading.Tasks.Task<ESB_WFUI.ServiceReference1.Weather> GetForecastByCityJsonAsync(string City, string Country) {
            return base.Channel.GetForecastByCityJsonAsync(City, Country);
        }
    }
}
